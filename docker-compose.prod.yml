version: '3.7'

x-variables: &variables
  SWAGGER_URL: ''

services:
  meta:
    build:
      context: .
      dockerfile: docker/server_prod/Dockerfile
    restart: 'always'
    entrypoint: '/entrypoint.sh'
    environment:
      <<: *variables
    env_file:
      - docker/postgres/env.env
      - docker/env/.env
      - docker/env/.email.env
    depends_on:
      - db
      - redis
    volumes:
      - media_data:/app/media/
      - static_data:/app/static/
      - redis_socket:/redis_socket
    networks:
      - meta_network

  db:
    image: postgres:13.2-alpine
    hostname: postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - docker/postgres/env.env
    ports:
      - "${DB_PORT}:5432"
    networks:
      - meta_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 50s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.0.6-alpine
    command:
      - /var/lib/redis/redis.conf
#    build:
#      context: .
#      dockerfile: docker/redis/Dockerfile
    restart: 'always'
    volumes:
      - ./docker/redis/redis.conf:/var/lib/redis/redis.conf:ro
      - redis_data:/data
      - redis_socket:/redis_socket
    networks:
      - meta_network
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 1m20s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx
    restart: 'always'
    networks:
      - meta_network
    depends_on:
      - meta
    ports:
      - '${PORT}:80'
    volumes:
      - media_data:/app/media/
      - static_data:/app/static/
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/allowed_ip.conf:/etc/nginx/allowed_ip.conf:ro

  celery:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    command: celery -A source worker -l info --beat --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./app/source/:/usr/src/web/:cached
      - ./app/source:/app
      - redis_socket:/redis_socket
    environment:
      <<: *variables
    env_file:
      - docker/postgres/.env.env
      - .env
      - docker/env/.email.env
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - meta_network


networks:
  meta_network:

volumes:
  postgres_data:
  static_data:
  media_data:
  redis_data:
  redis_socket:
